{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport Functions from \"./Functions\";\nimport Media from \"./Media\";\nimport { connect } from \"react-redux\";\nlet FreddyIterator = Functions.Freddy();\nlet BonnieIterator = Functions.Bonnie();\nlet ChicaIterator = Functions.Chica();\nlet FoxyIterator = Functions.Foxy();\nFreddyIterator.next();\nlet FreddyTime = 10000;\nlet BonnieTime = 3000;\nlet ChicaTime = 6300;\nlet FoxyTime = 13000;\nlet FreddyRange = 1;\nlet BonnieRange = 1;\nlet ChicaRange = 2;\nlet FoxyRange = 1;\nlet isBlackout = false;\nlet isGameOver = false;\n\nfunction Animatronic({\n  animatronics,\n  config,\n  handleJumpscare,\n  isThisDoorOpen,\n  dispatch\n}) {\n  const {\n    hour,\n    gameOver,\n    blackout\n  } = config;\n  useEffect(() => {\n    willMove(\"Bonnie\", BonnieRange, BonnieIterator, BonnieTime);\n    willMove(\"Chica\", ChicaRange, ChicaIterator, ChicaTime);\n    willMove(\"Foxy\", FoxyRange, FoxyIterator, FoxyTime, true);\n    willMove(\"Freddy\", FreddyRange, FreddyIterator, FreddyTime, true);\n    return () => {\n      FreddyIterator = Functions.Freddy();\n      BonnieIterator = Functions.Bonnie();\n      ChicaIterator = Functions.Chica();\n      FoxyIterator = Functions.Foxy();\n      FreddyIterator.next();\n      FreddyTime = 10000;\n      BonnieTime = 3000;\n      ChicaTime = 6300;\n      FoxyTime = 13000;\n      FreddyRange = 1;\n      BonnieRange = 1;\n      ChicaRange = 2;\n      FoxyRange = 1;\n      isBlackout = false;\n      isGameOver = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (hour === 2) {\n      FreddyTime = 9500;\n      BonnieTime = 2700;\n      ChicaTime = 5800;\n      FoxyTime = 10000;\n      BonnieRange += 1;\n      ChicaRange += 1;\n    } else if (hour === 4) {\n      BonnieRange += 1;\n      ChicaRange += 1;\n      FreddyRange += 1;\n      FoxyRange += 1;\n    }\n  }, [hour]);\n  useEffect(() => {\n    if (gameOver) isGameOver = gameOver;\n  }, [gameOver]);\n\n  const changeAnimatronic = func => {\n    dispatch({\n      type: \"CHANGE_ANIMATRONICS_MOVING\",\n      content: true\n    });\n    func();\n    setTimeout(() => {\n      dispatch({\n        type: \"CHANGE_ANIMATRONICS_MOVING\",\n        content: false\n      });\n    }, 1500);\n  };\n\n  const animatronicFailed = character => {\n    changeAnimatronic(() => {\n      dispatch({\n        type: \"CHANGE_ANIMATRONIC\",\n        animatronic: character,\n        animatronicState: {\n          door: false,\n          camera: character === \"Freddy\" ? \"Stage\" : character === \"Foxy\" ? \"\" : \"Dinning Area\",\n          jumpscare: false\n        }\n      });\n\n      if (character === \"Bonnie\") {\n        BonnieIterator = Functions.Bonnie();\n        willMove(\"Bonnie\", BonnieRange, BonnieIterator, BonnieTime);\n      } else if (character === \"Chica\") {\n        ChicaIterator = Functions.Chica();\n        willMove(\"Chica\", ChicaRange, ChicaIterator, ChicaTime);\n      } else if (character === \"Foxy\") {\n        FoxyIterator = Functions.Foxy();\n        Media.Sounds.FoxyPunch.play();\n        willMove(\"Foxy\", FoxyRange, FoxyIterator, FoxyTime, true);\n      } else if (character === \"Freddy\") {\n        FreddyIterator = Functions.Freddy();\n        FreddyIterator.next();\n        willMove(\"Freddy\", FreddyRange, FreddyIterator, FreddyTime, true);\n      }\n    });\n  };\n\n  const freddyLaugh = () => {\n    if (isBlackout) return;\n    let FreddyNumber = Math.floor(Math.random() * 2);\n\n    if (FreddyNumber == 0) {\n      Media.Sounds.FreddyLaugh1.play();\n    } else {\n      Media.Sounds.FreddyLaugh2.play();\n    }\n  };\n\n  useEffect(() => {\n    if (blackout) isBlackout = true;\n  }, [blackout]);\n\n  const willMove = (character, range, iterator, animaTime) => {\n    const thisInterval = setInterval(() => {\n      let luckyNumber = Math.floor(Math.random() * 5);\n      let condition = luckyNumber < range && !animatronics[character].door;\n      let newPlace;\n\n      if (condition) {\n        changeAnimatronic(() => {\n          newPlace = iterator.next().value;\n          const newState = {\n            door: newPlace === \"Door\" || newPlace === \"_3\",\n            jumpscare: false,\n            camera: newPlace\n          };\n          dispatch({\n            type: \"CHANGE_ANIMATRONIC\",\n            animatronic: character,\n            animatronicState: newState\n          });\n        });\n        if (character === \"Freddy\") freddyLaugh();\n      }\n\n      if (isBlackout || isGameOver) clearInterval(thisInterval);\n\n      if (newPlace === \"Door\" || newPlace === \"_3\") {\n        if (!isBlackout) checkDoors(character);\n        clearInterval(thisInterval);\n      }\n    }, animaTime);\n  };\n\n  async function checkDoors(character) {\n    const door = character === \"Bonnie\" || character === \"Foxy\" ? \"leftDoor\" : \"rightDoor\";\n    setTimeout(async () => {\n      const isDoorOpen = await isThisDoorOpen(door);\n\n      if (!isDoorOpen) {\n        setTimeout(async () => {\n          const isDoorOpen = await isThisDoorOpen(door);\n\n          if (!isDoorOpen) {\n            setTimeout(async () => {\n              const isDoorOpen = await isThisDoorOpen(door);\n\n              if (!isDoorOpen) {\n                handleJumpscare(character);\n              } else animatronicFailed(character);\n            }, 3000);\n          } else animatronicFailed(character);\n        }, 5000);\n      } else animatronicFailed(character);\n    }, 10000);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nconst mapStateToProps = state => {\n  return {\n    leftDoor: state.officeReducer.leftDoor,\n    rightDoor: state.officeReducer.rightDoor,\n    animatronics: state.animatronicsReducer,\n    config: state.configReducer\n  };\n};\n\nexport default connect(mapStateToProps)(Animatronic);","map":{"version":3,"sources":["/home/ras/Documents/PROJECTS/REACT/Five-Nights-at-Freddys-Web/src/components/Animatronic.js"],"names":["React","useState","useEffect","Functions","Media","connect","FreddyIterator","Freddy","BonnieIterator","Bonnie","ChicaIterator","Chica","FoxyIterator","Foxy","next","FreddyTime","BonnieTime","ChicaTime","FoxyTime","FreddyRange","BonnieRange","ChicaRange","FoxyRange","isBlackout","isGameOver","Animatronic","animatronics","config","handleJumpscare","isThisDoorOpen","dispatch","hour","gameOver","blackout","willMove","changeAnimatronic","func","type","content","setTimeout","animatronicFailed","character","animatronic","animatronicState","door","camera","jumpscare","Sounds","FoxyPunch","play","freddyLaugh","FreddyNumber","Math","floor","random","FreddyLaugh1","FreddyLaugh2","range","iterator","animaTime","thisInterval","setInterval","luckyNumber","condition","newPlace","value","newState","clearInterval","checkDoors","isDoorOpen","mapStateToProps","state","leftDoor","officeReducer","rightDoor","animatronicsReducer","configReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Functions from \"./Functions\";\r\nimport Media from \"./Media\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet FreddyIterator = Functions.Freddy();\r\nlet BonnieIterator = Functions.Bonnie();\r\nlet ChicaIterator = Functions.Chica();\r\nlet FoxyIterator = Functions.Foxy();\r\n\r\nFreddyIterator.next();\r\n\r\nlet FreddyTime = 10000;\r\nlet BonnieTime = 3000;\r\nlet ChicaTime = 6300;\r\nlet FoxyTime = 13000;\r\n\r\nlet FreddyRange = 1;\r\nlet BonnieRange = 1;\r\nlet ChicaRange = 2;\r\nlet FoxyRange = 1;\r\n\r\nlet isBlackout = false;\r\nlet isGameOver = false;\r\n\r\nfunction Animatronic({\r\n  animatronics,\r\n  config,\r\n  handleJumpscare,\r\n  isThisDoorOpen,\r\n  dispatch,\r\n}) {\r\n  const { hour, gameOver, blackout } = config;\r\n\r\n  useEffect(() => {\r\n    willMove(\"Bonnie\", BonnieRange, BonnieIterator, BonnieTime);\r\n    willMove(\"Chica\", ChicaRange, ChicaIterator, ChicaTime);\r\n    willMove(\"Foxy\", FoxyRange, FoxyIterator, FoxyTime, true);\r\n    willMove(\"Freddy\", FreddyRange, FreddyIterator, FreddyTime, true);\r\n\r\n    return () => {\r\n      FreddyIterator = Functions.Freddy();\r\n      BonnieIterator = Functions.Bonnie();\r\n      ChicaIterator = Functions.Chica();\r\n      FoxyIterator = Functions.Foxy();\r\n\r\n      FreddyIterator.next();\r\n\r\n      FreddyTime = 10000;\r\n      BonnieTime = 3000;\r\n      ChicaTime = 6300;\r\n      FoxyTime = 13000;\r\n      FreddyRange = 1;\r\n      BonnieRange = 1;\r\n      ChicaRange = 2;\r\n      FoxyRange = 1;\r\n\r\n      isBlackout = false;\r\n      isGameOver = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (hour === 2) {\r\n      FreddyTime = 9500;\r\n      BonnieTime = 2700;\r\n      ChicaTime = 5800;\r\n      FoxyTime = 10000;\r\n\r\n      BonnieRange += 1;\r\n      ChicaRange += 1;\r\n    } else if (hour === 4) {\r\n      BonnieRange += 1;\r\n      ChicaRange += 1;\r\n      FreddyRange += 1;\r\n      FoxyRange += 1;\r\n    }\r\n  }, [hour]);\r\n\r\n  useEffect(() => {\r\n    if (gameOver) isGameOver = gameOver;\r\n  }, [gameOver]);\r\n\r\n  const changeAnimatronic = (func) => {\r\n    dispatch({ type: \"CHANGE_ANIMATRONICS_MOVING\", content: true });\r\n\r\n    func();\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"CHANGE_ANIMATRONICS_MOVING\",\r\n        content: false,\r\n      });\r\n    }, 1500);\r\n  };\r\n\r\n  const animatronicFailed = (character) => {\r\n    changeAnimatronic(() => {\r\n      dispatch({\r\n        type: \"CHANGE_ANIMATRONIC\",\r\n        animatronic: character,\r\n        animatronicState: {\r\n          door: false,\r\n          camera:\r\n            character === \"Freddy\"\r\n              ? \"Stage\"\r\n              : character === \"Foxy\"\r\n              ? \"\"\r\n              : \"Dinning Area\",\r\n          jumpscare: false,\r\n        },\r\n      });\r\n\r\n      if (character === \"Bonnie\") {\r\n        BonnieIterator = Functions.Bonnie();\r\n        willMove(\"Bonnie\", BonnieRange, BonnieIterator, BonnieTime);\r\n      } else if (character === \"Chica\") {\r\n        ChicaIterator = Functions.Chica();\r\n        willMove(\"Chica\", ChicaRange, ChicaIterator, ChicaTime);\r\n      } else if (character === \"Foxy\") {\r\n        FoxyIterator = Functions.Foxy();\r\n        Media.Sounds.FoxyPunch.play();\r\n        willMove(\"Foxy\", FoxyRange, FoxyIterator, FoxyTime, true);\r\n      } else if (character === \"Freddy\") {\r\n        FreddyIterator = Functions.Freddy();\r\n        FreddyIterator.next();\r\n        willMove(\"Freddy\", FreddyRange, FreddyIterator, FreddyTime, true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const freddyLaugh = () => {\r\n    if (isBlackout) return;\r\n    let FreddyNumber = Math.floor(Math.random() * 2);\r\n    if (FreddyNumber == 0) {\r\n      Media.Sounds.FreddyLaugh1.play();\r\n    } else {\r\n      Media.Sounds.FreddyLaugh2.play();\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (blackout) isBlackout = true;\r\n  }, [blackout]);\r\n\r\n  const willMove = (character, range, iterator, animaTime) => {\r\n    const thisInterval = setInterval(() => {\r\n      let luckyNumber = Math.floor(Math.random() * 5);\r\n\r\n      let condition = luckyNumber < range && !animatronics[character].door;\r\n\r\n      let newPlace;\r\n      if (condition) {\r\n        changeAnimatronic(() => {\r\n          newPlace = iterator.next().value;\r\n\r\n          const newState = {\r\n            door: newPlace === \"Door\" || newPlace === \"_3\",\r\n            jumpscare: false,\r\n            camera: newPlace,\r\n          };\r\n          dispatch({\r\n            type: \"CHANGE_ANIMATRONIC\",\r\n            animatronic: character,\r\n            animatronicState: newState,\r\n          });\r\n        });\r\n\r\n        if (character === \"Freddy\") freddyLaugh();\r\n      }\r\n\r\n      if (isBlackout || isGameOver) clearInterval(thisInterval);\r\n\r\n      if (newPlace === \"Door\" || newPlace === \"_3\") {\r\n        if (!isBlackout) checkDoors(character);\r\n        clearInterval(thisInterval);\r\n      }\r\n    }, animaTime);\r\n  };\r\n\r\n  async function checkDoors(character) {\r\n    const door =\r\n      character === \"Bonnie\" || character === \"Foxy\" ? \"leftDoor\" : \"rightDoor\";\r\n\r\n    setTimeout(async () => {\r\n      const isDoorOpen = await isThisDoorOpen(door);\r\n      if (!isDoorOpen) {\r\n        setTimeout(async () => {\r\n          const isDoorOpen = await isThisDoorOpen(door);\r\n          if (!isDoorOpen) {\r\n            setTimeout(async () => {\r\n              const isDoorOpen = await isThisDoorOpen(door);\r\n              if (!isDoorOpen) {\r\n                handleJumpscare(character);\r\n              } else animatronicFailed(character);\r\n            }, 3000);\r\n          } else animatronicFailed(character);\r\n        }, 5000);\r\n      } else animatronicFailed(character);\r\n    }, 10000);\r\n  }\r\n\r\n  return <></>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    leftDoor: state.officeReducer.leftDoor,\r\n    rightDoor: state.officeReducer.rightDoor,\r\n    animatronics: state.animatronicsReducer,\r\n    config: state.configReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Animatronic);\r\n"]},"metadata":{},"sourceType":"module"}