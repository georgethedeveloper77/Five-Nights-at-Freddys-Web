{"ast":null,"code":"var _jsxFileName = \"/home/ras/Documents/PROJECTS/REACT/Five-Nights-at-Freddys-Web/src/Controller.js\";\nimport React, { useState, useEffect } from \"react\";\nimport BlackoutSound from \"./media/Sounds/powerdown.mp3\";\nimport { connect } from \"react-redux\";\nimport Game from \"./Game\";\nimport StaticImage from \"./media/Textures/Static-Cam.webp\";\nimport StaticSound from \"./media/Sounds/Dead.mp3\";\nimport VictoryGIF from \"./media/Textures/Victory.gif\";\nimport VictorySound from \"./media/Sounds/Clock.mp3\"; ///89000\n\nconst TIME_TO_CHANGE_HOUR = 80000;\nlet gameOverAudio = new Audio(StaticSound);\nlet hourInterval = null;\n\nfunction Controller({\n  isPlaying,\n  hour,\n  time,\n  energy,\n  jumpscare,\n  setStart,\n  dispatch\n}) {\n  const [gameOver, setGameOver] = useState(false);\n  const [victory, setVictory] = useState(false);\n  useEffect(() => {\n    dispatch({\n      type: \"CLEAR_DATA\"\n    });\n    changeEnergy();\n    hourInterval = setInterval(() => {\n      if (hour === 6 && !gameOver) endGame(true);else changeHour(hour);\n    }, TIME_TO_CHANGE_HOUR);\n    return () => {\n      clearInterval(hourInterval);\n      dispatch({\n        type: \"CLEAR_DATA\"\n      });\n      gameOverAudio.pause();\n    };\n  }, []);\n  useEffect(() => {\n    if (energy <= 0) {\n      setBlackout();\n    } else changeEnergy(energy);\n  }, [energy]);\n\n  async function changeHour(h) {\n    if (isPlaying && !jumpscare && !gameOver && h < 6) {\n      dispatch({\n        type: \"CHANGE_HOUR\"\n      });\n    }\n  }\n\n  async function changeEnergy(e) {\n    if (isPlaying && !gameOver && e > 0) {\n      setTimeout(() => {\n        dispatch({\n          type: \"CHANGE_ENERGY\"\n        });\n      }, time);\n    }\n  }\n\n  const setBlackout = () => {\n    new Audio(BlackoutSound).play();\n    dispatch({\n      type: \"FORCE_CAMERA_CLOSE\"\n    });\n    dispatch({\n      type: \"CHANGE_CAMERA_BUTTON\"\n    });\n  };\n\n  const endGame = hasWon => {\n    if (hasWon) {\n      setVictory(true);\n      let VictoryMusic = new Audio(VictorySound);\n      VictoryMusic.play();\n      localStorage.setItem(\"★\", \"★\");\n    } else {\n      setGameOver(true);\n      gameOverAudio.currentTime = 0;\n      gameOverAudio.play();\n    }\n\n    dispatch({\n      type: \"SET_GAME_OVER\"\n    });\n    setTimeout(() => {\n      setStart(false);\n    }, 10000);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, gameOver ? /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"static\",\n    src: StaticImage,\n    style: {\n      width: \"100vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }) : null, victory ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"victory\",\n    src: VictoryGIF,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  })) : null, /*#__PURE__*/React.createElement(Game, {\n    gameOver: gameOver || victory,\n    endGame: endGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    time: state.configReducer.time,\n    hour: state.configReducer.hour,\n    isPlaying: state.configReducer.isPlaying,\n    jumpscare: state.configReducer.jumpscare,\n    energy: state.configReducer.energy,\n    animatronics: state.animatronicsReducer\n  };\n};\n\nexport default connect(mapStateToProps)(Controller);","map":{"version":3,"sources":["/home/ras/Documents/PROJECTS/REACT/Five-Nights-at-Freddys-Web/src/Controller.js"],"names":["React","useState","useEffect","BlackoutSound","connect","Game","StaticImage","StaticSound","VictoryGIF","VictorySound","TIME_TO_CHANGE_HOUR","gameOverAudio","Audio","hourInterval","Controller","isPlaying","hour","time","energy","jumpscare","setStart","dispatch","gameOver","setGameOver","victory","setVictory","type","changeEnergy","setInterval","endGame","changeHour","clearInterval","pause","setBlackout","h","e","setTimeout","play","hasWon","VictoryMusic","localStorage","setItem","currentTime","width","height","display","justifyContent","alignItems","mapStateToProps","state","configReducer","animatronics","animatronicsReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BlackoutSound from \"./media/Sounds/powerdown.mp3\";\r\nimport { connect } from \"react-redux\";\r\nimport Game from \"./Game\";\r\n\r\nimport StaticImage from \"./media/Textures/Static-Cam.webp\";\r\nimport StaticSound from \"./media/Sounds/Dead.mp3\";\r\nimport VictoryGIF from \"./media/Textures/Victory.gif\";\r\nimport VictorySound from \"./media/Sounds/Clock.mp3\";\r\n\r\n///89000\r\nconst TIME_TO_CHANGE_HOUR = 80000;\r\n\r\nlet gameOverAudio = new Audio(StaticSound);\r\nlet hourInterval = null;\r\n\r\nfunction Controller({\r\n    isPlaying,\r\n    hour,\r\n    time,\r\n    energy,\r\n    jumpscare,\r\n    setStart,\r\n    dispatch,\r\n}) {\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [victory, setVictory] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: \"CLEAR_DATA\" });\r\n        changeEnergy();\r\n        \r\n        hourInterval = setInterval(() => {\r\n            if (hour === 6 && !gameOver) endGame(true);\r\n            else changeHour(hour);\r\n        }, TIME_TO_CHANGE_HOUR);\r\n\r\n        return () => {\r\n            clearInterval(hourInterval);\r\n            dispatch({ type: \"CLEAR_DATA\" });\r\n            gameOverAudio.pause();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (energy <= 0) {\r\n            setBlackout();\r\n        } else changeEnergy(energy);\r\n    }, [energy]);\r\n\r\n    async function changeHour(h) {\r\n        if (isPlaying && !jumpscare && !gameOver && h < 6) {\r\n            dispatch({ type: \"CHANGE_HOUR\" });\r\n        }\r\n    }\r\n\r\n    async function changeEnergy(e) {\r\n        if (isPlaying && !gameOver && e > 0) {\r\n            setTimeout(() => {\r\n                dispatch({ type: \"CHANGE_ENERGY\" });\r\n            }, time);\r\n        }\r\n    }\r\n\r\n    const setBlackout = () => {\r\n        new Audio(BlackoutSound).play();\r\n\r\n        dispatch({ type: \"FORCE_CAMERA_CLOSE\" });\r\n        dispatch({ type: \"CHANGE_CAMERA_BUTTON\" });\r\n    };\r\n\r\n    const endGame = (hasWon) => {\r\n        if (hasWon) {\r\n            setVictory(true);\r\n            let VictoryMusic = new Audio(VictorySound);\r\n            VictoryMusic.play();\r\n            localStorage.setItem(\"★\", \"★\");\r\n        } else {\r\n            setGameOver(true);\r\n            gameOverAudio.currentTime = 0;\r\n            gameOverAudio.play();\r\n        }\r\n        dispatch({ type: \"SET_GAME_OVER\" });\r\n        setTimeout(() => {\r\n            setStart(false);\r\n        }, 10000);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {gameOver ? (\r\n                <img\r\n                    alt=\"static\"\r\n                    src={StaticImage}\r\n                    style={{ width: \"100vw\" }}\r\n                />\r\n            ) : null}\r\n            {victory ? (\r\n                <div\r\n                    style={{\r\n                        width: \"100vw\",\r\n                        height: \"100vh\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    <img alt=\"victory\" src={VictoryGIF} />\r\n                </div>\r\n            ) : null}\r\n            <Game gameOver={gameOver || victory} endGame={endGame} />\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        time: state.configReducer.time,\r\n        hour: state.configReducer.hour,\r\n        isPlaying: state.configReducer.isPlaying,\r\n        jumpscare: state.configReducer.jumpscare,\r\n        energy: state.configReducer.energy,\r\n        animatronics: state.animatronicsReducer,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Controller);\r\n"]},"metadata":{},"sourceType":"module"}